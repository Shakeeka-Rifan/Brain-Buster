{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\n\n// Fetch a new math question\nexport const fetchQuestion = async () => {\n  try {\n    const res = await axios.get(`${API_URL}/score/banana`);\n    return res.data;\n  } catch (error) {\n    console.error(\"Error fetching question\", error);\n    throw error;\n  }\n};\n\n// Save user score\nexport const saveScore = async updatedScore => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const userId = localStorage.getItem(\"userId\");\n    const difficulty = localStorage.getItem(\"selectedDifficulty\") || \"Easy\";\n    if (!token || !userId) {\n      console.error(\"User ID or Token not found\");\n      return;\n    }\n    await axios.post(`${API_URL}/score/save`, {\n      userId,\n      score: updatedScore,\n      difficulty\n    }, {\n      headers: {\n        Authorization: token\n      }\n    });\n  } catch (error) {\n    console.error(\"Error saving score\", error);\n    throw error;\n  }\n};\nexport const fetchTotalScore = async userId => {\n  const response = await axios.get(`${API_URL}/score/total-score/${userId}`);\n  return response.data;\n};","map":{"version":3,"names":["axios","API_URL","fetchQuestion","res","get","data","error","console","saveScore","updatedScore","token","localStorage","getItem","userId","difficulty","post","score","headers","Authorization","fetchTotalScore","response"],"sources":["A:/Brain Buster/banana-brain-buster-frontend/src/services/gameService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Fetch a new math question\r\nexport const fetchQuestion = async () => {\r\n  try {\r\n    const res = await axios.get(`${API_URL}/score/banana`);\r\n    return res.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching question\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Save user score\r\nexport const saveScore = async (updatedScore) => {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const difficulty = localStorage.getItem(\"selectedDifficulty\") || \"Easy\";\r\n\r\n    if (!token || !userId) {\r\n      console.error(\"User ID or Token not found\");\r\n      return;\r\n    }\r\n\r\n    await axios.post(`${API_URL}/score/save`, { userId, score: updatedScore, difficulty }, { headers: { Authorization: token } });\r\n  } catch (error) {\r\n    console.error(\"Error saving score\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchTotalScore = async (userId) => {\r\n    const response = await axios.get(`${API_URL}/score/total-score/${userId}`);\r\n    return response.data;\r\n  };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,eAAe,CAAC;IACtD,OAAOE,GAAG,CAACE,IAAI;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,SAAS,GAAG,MAAOC,YAAY,IAAK;EAC/C,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,MAAM,GAAGF,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7C,MAAME,UAAU,GAAGH,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,IAAI,MAAM;IAEvE,IAAI,CAACF,KAAK,IAAI,CAACG,MAAM,EAAE;MACrBN,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAC;MAC3C;IACF;IAEA,MAAMN,KAAK,CAACe,IAAI,CAAC,GAAGd,OAAO,aAAa,EAAE;MAAEY,MAAM;MAAEG,KAAK,EAAEP,YAAY;MAAEK;IAAW,CAAC,EAAE;MAAEG,OAAO,EAAE;QAAEC,aAAa,EAAER;MAAM;IAAE,CAAC,CAAC;EAC/H,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMa,eAAe,GAAG,MAAON,MAAM,IAAK;EAC7C,MAAMO,QAAQ,GAAG,MAAMpB,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,sBAAsBY,MAAM,EAAE,CAAC;EAC1E,OAAOO,QAAQ,CAACf,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}